package com.deloitte.employee.controller;


import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.deloitte.employee.entity.Employee;
import com.deloitte.employee.exception.BusinessException;
import com.deloitte.employee.exception.ControllerException;
import com.deloitte.employee.service.EmployeeService;

import io.swagger.v3.oas.annotations.Operation;

@RestController
@RequestMapping("/employee")
public class EmployeeController {
	
	@Autowired
	private EmployeeService employeeService;
	
	Logger logger = LoggerFactory.getLogger(EmployeeController.class); 
	
	@Operation(summary = "Add Employee", description = "Adding new employees to the list", tags = "Post")
	@PostMapping("/addEmp")
	public ResponseEntity<?> saveEmp(@RequestBody Employee emp){
		try {
			employeeService.saveEmp(emp);
			String resp1 = "Data of New "+emp+" is added";
			return new ResponseEntity<String>(resp1, HttpStatus.CREATED);
		}catch(BusinessException e) {
			ControllerException ce = new ControllerException(e.getErrorCode(), e.getErrorMessage());
			return new ResponseEntity<ControllerException>(ce, HttpStatus.BAD_REQUEST);
		}catch(Exception e){
			ControllerException ce = new ControllerException("615", "Something went wrong in the controller");
			return new ResponseEntity<ControllerException>(ce, HttpStatus.BAD_REQUEST);
		}
	}
	
	@Operation(summary = "Get all employees", description = "Getting all employees from the list", tags = "Get")
	@GetMapping("/allEmployees")
	public ResponseEntity<?> fetchEmployees(){
		try { 
		List resp2 = employeeService.fetchEmployees();
				System.out.println("Getting from Database: "+resp2);
				return new ResponseEntity<List<Employee>>(resp2,HttpStatus.OK); 
		}	catch(BusinessException e) {
			ControllerException ce = new ControllerException(e.getErrorCode(), e.getErrorMessage());
		return new ResponseEntity<ControllerException>(ce, HttpStatus.BAD_REQUEST);
		
	}catch(Exception e) {
		ControllerException ce = new ControllerException("616","Something went wrong in the controller");
		return new ResponseEntity<ControllerException>(ce, HttpStatus.BAD_REQUEST);
		}
	}
	
	@Operation(summary = "Get an Employee by id", description = "Getting an employee by id from the list", tags = "Get")
	@GetMapping("/emp/{id}")
	public ResponseEntity<?> getEmpById(@PathVariable("id") Integer employeeId){
		try {
			Employee resp3 = employeeService.getEmpById(employeeId);
			return new ResponseEntity<Employee>(resp3, HttpStatus.OK);
		}catch(BusinessException e) {
			logger.error("Exception in getting employee by Id");	
			return new ResponseEntity<>(e.getErrorMessage(),HttpStatus.BAD_REQUEST);
		}catch(Exception e) {
			ControllerException ce = new ControllerException("617","Something went wrong in the controller");
			return new ResponseEntity<ControllerException>(ce, HttpStatus.BAD_REQUEST);
		}
	}
	
	@Operation(summary = "Update Employee", description = "updating the existing employee in the list", tags = "Put")
	@PutMapping("/updateEmp")
	public ResponseEntity<?> updateEmployees(@RequestBody Employee employee){
		try {
			employeeService.updateEmployees(employee);
			String resp4 = "Data of Employee "+employee.getEmployeeId()+" is Updated";
			return new ResponseEntity<String>(resp4,HttpStatus.OK);
			
		}catch(BusinessException e) {
		logger.error("Exception in update");	
			return new ResponseEntity<>(e.getErrorMessage(), HttpStatus.BAD_REQUEST);
		}
		catch(Exception e) {
			return new ResponseEntity<>(e.getMessage(),HttpStatus.BAD_REQUEST);
		}
	}
	
	@Operation(summary = "Delete Employee", description = "Delete an employee by id from the list", tags = "Delete")
	@DeleteMapping("/deleteEmp/{id}")
	public ResponseEntity<?> deleteEmp(@PathVariable ("id") Integer employeeId){
		try {
			employeeService.deleteEmp(employeeId);
			
			
			String resp5 = "Data of Employee "+employeeId+" deleted";
			return new ResponseEntity<String>(resp5,HttpStatus.OK);
		}
		catch(BusinessException e){
			ControllerException ce = new ControllerException(e.getErrorCode(), e.getErrorMessage());
			return new ResponseEntity<ControllerException>(ce,HttpStatus.BAD_REQUEST);
		}catch(Exception e) {
			ControllerException ce = new ControllerException("619","Something went wrong in the controller");
			return new ResponseEntity<ControllerException>(ce,HttpStatus.BAD_REQUEST);}
			
		}
	
	@Operation(summary = "Get an Employee by name", description = "Getting an employee by name from the list", tags = "Get")
	@GetMapping("/name/{name}")
	public ResponseEntity<?> getEmpByName(@PathVariable("name") String name){
		List<Employee> resp6 = employeeService.getEmpByName(name);
		if(resp6.size() > 0) {
			return new ResponseEntity<List<Employee>>(resp6, HttpStatus.OK);
		}else {
			ControllerException ce = new ControllerException("620","No Data of employee '"+name+"' found");
			return new ResponseEntity<ControllerException>(ce, HttpStatus.BAD_REQUEST);
			}
	
		}		
}


